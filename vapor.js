const hide = ' hide'
const isClient = navigator.appVersion.search('Electron') !== -1
const clientClass = isClient ? '' : hide
const isLogged = document.querySelector('#global_action_menu > .persona_name_text_content') !== null
const loggedClass = isLogged ? '' : hide
const svg = {
  leftArrow: 'M14.71 15.88L10.83 12L14.71 8.11998C15.1 7.72998 15.1 7.09998 14.71 6.70998C14.32 6.31998 13.69 6.31998 13.3 6.70998L8.70998 11.3C8.31998 11.69 8.31998 12.32 8.70998 12.71L13.3 17.3C13.69 17.69 14.32 17.69 14.71 17.3C15.09 16.91 15.1 16.27 14.71 15.88Z',
  rightArrow: 'M9.29002 8.12002L13.17 12L9.29002 15.88C8.90002 16.27 8.90002 16.9 9.29002 17.29C9.68002 17.68 10.31 17.68 10.7 17.29L15.29 12.7C15.68 12.31 15.68 11.68 15.29 11.29L10.7 6.70002C10.31 6.31002 9.68002 6.31002 9.29002 6.70002C8.91002 7.09002 8.90002 7.73002 9.29002 8.12002Z',
  friends: 'M16.6665 11.4585C18.3957 11.4585 19.7811 10.0627 19.7811 8.3335C19.7811 6.60433 18.3957 5.2085 16.6665 5.2085C14.9373 5.2085 13.5415 6.60433 13.5415 8.3335C13.5415 10.0627 14.9373 11.4585 16.6665 11.4585ZM8.33317 11.4585C10.0623 11.4585 11.4478 10.0627 11.4478 8.3335C11.4478 6.60433 10.0623 5.2085 8.33317 5.2085C6.604 5.2085 5.20817 6.60433 5.20817 8.3335C5.20817 10.0627 6.604 11.4585 8.33317 11.4585ZM8.33317 13.5418C5.90609 13.5418 1.0415 14.7606 1.0415 17.1877V18.7502C1.0415 19.3231 1.51025 19.7918 2.08317 19.7918H14.5832C15.1561 19.7918 15.6248 19.3231 15.6248 18.7502V17.1877C15.6248 14.7606 10.7603 13.5418 8.33317 13.5418ZM16.6665 13.5418C16.3644 13.5418 16.0207 13.5627 15.6561 13.5939C15.6769 13.6043 15.6873 13.6252 15.6978 13.6356C16.8853 14.5002 17.7082 15.6564 17.7082 17.1877V18.7502C17.7082 19.1147 17.6353 19.4689 17.5207 19.7918H22.9165C23.4894 19.7918 23.9582 19.3231 23.9582 18.7502V17.1877C23.9582 14.7606 19.0936 13.5418 16.6665 13.5418Z',
  notification: 'M12.5002 22.9165C13.6461 22.9165 14.5836 21.979 14.5836 20.8332H10.4169C10.4169 21.979 11.344 22.9165 12.5002 22.9165ZM18.7502 16.6665V11.4582C18.7502 8.26025 17.0419 5.58317 14.0627 4.87484V4.1665C14.0627 3.30192 13.3648 2.604 12.5002 2.604C11.6357 2.604 10.9377 3.30192 10.9377 4.1665V4.87484C7.94815 5.58317 6.25024 8.24984 6.25024 11.4582V16.6665L4.90649 18.0103C4.25024 18.6665 4.70857 19.7915 5.63565 19.7915H19.3544C20.2815 19.7915 20.7502 18.6665 20.094 18.0103L18.7502 16.6665Z',
  downArrow: 'M6.76644 8.2418L9.99977 11.4751L13.2331 8.2418C13.5581 7.9168 14.0831 7.9168 14.4081 8.2418C14.7331 8.5668 14.7331 9.0918 14.4081 9.4168L10.5831 13.2418C10.2581 13.5668 9.73311 13.5668 9.40811 13.2418L5.58311 9.4168C5.25811 9.0918 5.25811 8.5668 5.58311 8.2418C5.90811 7.92513 6.44144 7.9168 6.76644 8.2418Z',
  minimize: 'M7.29167 11.6264H17.7083C18.2812 11.6264 18.75 12.0952 18.75 12.6681C18.75 13.241 18.2812 13.7097 17.7083 13.7097H7.29167C6.71875 13.7097 6.25 13.241 6.25 12.6681C6.25 12.0952 6.71875 11.6264 7.29167 11.6264Z',
  maximize: 'M8.31931 5.05627H19.9344C21.0959 5.05627 21.3423 5.68301 21.3423 6.44903V15.5019C21.3423 15.8849 21.2191 16.3497 20.6383 16.3497C20.0576 16.3497 19.9344 15.8849 19.9344 15.5019V7.1454C19.9344 6.7624 19.4593 6.44903 18.8785 6.44903H8.31931C7.73856 6.44903 7.2634 6.13566 7.2634 5.75265C7.2634 5.36964 7.73856 5.05627 8.31931 5.05627ZM5.15158 7.84181H16.7667C17.9282 7.84181 18.5265 8.46855 18.5265 9.23456V18.9838C18.5265 19.7498 17.9282 20.3766 16.7667 20.3766H5.15158C3.99006 20.3766 3.74364 19.7498 3.74364 18.9838V9.23456C3.74364 8.46855 3.99006 7.84181 5.15158 7.84181ZM6.20749 18.9838H15.7108C16.2915 18.9838 16.7667 18.6705 16.7667 18.2875V9.93094C16.7667 9.54793 16.2915 9.23456 15.7108 9.23456H6.20749C5.62674 9.23456 5.15158 9.54793 5.15158 9.93094V18.2875C5.15158 18.6705 5.62674 18.9838 6.20749 18.9838Z',
  close: 'M19.0625 5.94786C18.6562 5.54161 18 5.54161 17.5937 5.94786L12.5 11.0312L7.40625 5.93744C7 5.53119 6.34375 5.53119 5.9375 5.93744C5.53125 6.34369 5.53125 6.99994 5.9375 7.40619L11.0312 12.4999L5.9375 17.5937C5.53125 17.9999 5.53125 18.6562 5.9375 19.0624C6.34375 19.4687 7 19.4687 7.40625 19.0624L12.5 13.9687L17.5937 19.0624C18 19.4687 18.6562 19.4687 19.0625 19.0624C19.4687 18.6562 19.4687 17.9999 19.0625 17.5937L13.9687 12.4999L19.0625 7.40619C19.4583 7.01036 19.4583 6.34369 19.0625 5.94786Z',
  search: 'M12.9167 11.6666H12.2584L12.025 11.4416C13.025 10.275 13.5417 8.68331 13.2584 6.99164C12.8667 4.67497 10.9334 2.82497 8.60003 2.54164C5.07503 2.10831 2.10837 5.07497 2.5417 8.59997C2.82503 10.9333 4.67503 12.8666 6.9917 13.2583C8.68337 13.5416 10.275 13.025 11.4417 12.025L11.6667 12.2583V12.9166L15.2084 16.4583C15.55 16.8 16.1084 16.8 16.45 16.4583C16.7917 16.1166 16.7917 15.5583 16.45 15.2166L12.9167 11.6666ZM7.9167 11.6666C5.8417 11.6666 4.1667 9.99164 4.1667 7.91664C4.1667 5.84164 5.8417 4.16664 7.9167 4.16664C9.9917 4.16664 11.6667 5.84164 11.6667 7.91664C11.6667 9.99164 9.9917 11.6666 7.9167 11.6666Z',
  options: 'M21.0492 14.0617C21.0926 13.715 21.1251 13.3684 21.1251 13C21.1251 12.6317 21.0926 12.285 21.0492 11.9384L23.3351 10.1509C23.5409 9.98835 23.5951 9.69585 23.4651 9.45752L21.2984 5.70919C21.1684 5.47085 20.8759 5.38419 20.6376 5.47085L17.9401 6.55419C17.3767 6.12085 16.7701 5.76335 16.1092 5.49252L15.6976 2.62169C15.6651 2.36169 15.4376 2.16669 15.1667 2.16669H10.8334C10.5626 2.16669 10.3351 2.36169 10.3026 2.62169L9.8909 5.49252C9.23007 5.76335 8.6234 6.13169 8.06007 6.55419L5.36257 5.47085C5.1134 5.37335 4.83174 5.47085 4.70174 5.70919L2.53507 9.45752C2.39424 9.69585 2.45924 9.98835 2.66507 10.1509L4.9509 11.9384C4.90757 12.285 4.87507 12.6425 4.87507 13C4.87507 13.3575 4.90757 13.715 4.9509 14.0617L2.66507 15.8492C2.45924 16.0117 2.40507 16.3042 2.53507 16.5425L4.70174 20.2909C4.83174 20.5292 5.12424 20.6159 5.36257 20.5292L8.06007 19.4459C8.6234 19.8792 9.23007 20.2367 9.8909 20.5075L10.3026 23.3784C10.3351 23.6384 10.5626 23.8334 10.8334 23.8334H15.1667C15.4376 23.8334 15.6651 23.6384 15.6976 23.3784L16.1092 20.5075C16.7701 20.2367 17.3767 19.8684 17.9401 19.4459L20.6376 20.5292C20.8867 20.6267 21.1684 20.5292 21.2984 20.2909L23.4651 16.5425C23.5951 16.3042 23.5409 16.0117 23.3351 15.8492L21.0492 14.0617ZM13.0001 16.7917C10.9092 16.7917 9.2084 15.0909 9.2084 13C9.2084 10.9092 10.9092 9.20835 13.0001 9.20835C15.0909 9.20835 16.7917 10.9092 16.7917 13C16.7917 15.0909 15.0909 16.7917 13.0001 16.7917Z',
  whishListEmpty: 'M19.9102 4.49004C17.2702 2.69004 14.0102 3.53004 12.2502 5.59004C10.4902 3.53004 7.23021 2.68004 4.59021 4.49004C3.19021 5.45004 2.31021 7.07004 2.25021 8.78004C2.11021 12.66 5.55021 15.77 10.8002 20.54L10.9002 20.63C11.6602 21.32 12.8302 21.32 13.5902 20.62L13.7002 20.52C18.9502 15.76 22.3802 12.65 22.2502 8.77004C22.1902 7.07004 21.3102 5.45004 19.9102 4.49004ZM12.3502 19.05L12.2502 19.15L12.1502 19.05C7.39021 14.74 4.25021 11.89 4.25021 9.00004C4.25021 7.00004 5.75021 5.50004 7.75021 5.50004C9.29021 5.50004 10.7902 6.49004 11.3202 7.86004H13.1902C13.7102 6.49004 15.2102 5.50004 16.7502 5.50004C18.7502 5.50004 20.2502 7.00004 20.2502 9.00004C20.2502 11.89 17.1102 14.74 12.3502 19.05Z',
  whishListFull: 'M13.3502 20.13C12.5902 20.82 11.4202 20.82 10.6602 20.12L10.5502 20.02C5.30015 15.27 1.87015 12.16 2.00015 8.27998C2.06015 6.57998 2.93015 4.94998 4.34015 3.98998C6.98015 2.18998 10.2402 3.02998 12.0002 5.08998C13.7602 3.02998 17.0202 2.17998 19.6602 3.98998C21.0702 4.94998 21.9402 6.57998 22.0002 8.27998C22.1402 12.16 18.7002 15.27 13.4502 20.04L13.3502 20.13Z',
}

// variable yoinking
let sessionId

function variableYoinker() {
  document.querySelectorAll('script').forEach((value, _) => {
    const position = value.innerHTML.search('var g_sessionID = "')
    if (position === -1) {
      return
    }

    const cutString = value.innerHTML.slice(position + 19)
    const endPosition = cutString.search('"')
    sessionId = cutString.slice(0, endPosition)
  })
}

variableYoinker()

function deleteElement(selector) {
  const element = document.querySelector(selector)

  if (element) {
    element.remove()
  }
}

function addElement(element, parentSelector) {
  const parent = document.querySelector(parentSelector)

  if (parent) {
    parent.appendChild(element)
  }
}

function addElementAfter(element, afterSelector) {
  const after = document.querySelector(afterSelector)

  if (after) {
    after.insertAdjacentElement('afterEnd', element)
  }
}

function createSVG(width, height, viewBox, d) {
  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')
  svg.setAttribute('width', width)
  svg.setAttribute('height', height)
  svg.setAttribute('viewBox', viewBox)
  
  const path = document.createElementNS('http://www.w3.org/2000/svg', 'path')
  path.setAttribute('d', d)

  svg.appendChild(path)
  return svg
}

function transformTag(tagIdOrElem, tagType){
  var elem = (tagIdOrElem instanceof HTMLElement) ? tagIdOrElem : document.getElementById(tagIdOrElem)
  if (!elem || !(elem instanceof HTMLElement)) {
    return
  }
  var children = elem.childNodes
  var parent = elem.parentNode
  var newNode = document.createElement(tagType || 'span')
  for (let a = 0; a < elem.attributes.length; a++) {
      newNode.setAttribute(elem.attributes[a].nodeName, elem.attributes[a].value)
  }
  for (let i = 0, clen = children.length; i < clen; i++) {
      newNode.appendChild(children[0])
  }
  newNode.style.cssText = elem.style.cssText
  parent.replaceChild(newNode, elem)
}
